/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
#include <interf_dec.h>
/* Header for class cn_wzh_amrcodec_decoder_AmrDecoder */

#ifndef _Included_cn_wzh_amrcodec_decoder_AmrDecoder
#define _Included_cn_wzh_amrcodec_decoder_AmrDecoder
#ifdef __cplusplus
extern "C" {
#endif
/*
 * Class:     cn_wzh_amrcodec_decoder_AmrDecoder
 * Method:    initDecamr
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_cn_wzh_amrcodec_decoder_AmrDecoder_initDecamr
  (JNIEnv *env, jclass aClazz){
	  return (jint) Decoder_Interface_init();
  }

/*
 * Class:     cn_wzh_amrcodec_decoder_AmrDecoder
 * Method:    exitDecAmr
 * Signature: (I)V
 */
JNIEXPORT void JNICALL Java_cn_wzh_amrcodec_decoder_AmrDecoder_exitDecAmr
  (JNIEnv *env, jclass aClazz, jint* nativePointer ){
	  Decoder_Interface_exit(nativePointer);
  }

/*
 * Class:     cn_wzh_amrcodec_decoder_AmrDecoder
 * Method:    decodeAmr
 * Signature: (I[B[SI)I
 */
JNIEXPORT void JNICALL Java_cn_wzh_amrcodec_decoder_AmrDecoder_decodeAmr
  (JNIEnv *env, jclass aClazz, jint* nativePointer, jbyteArray in, jshortArray out, jint bfi){
	  jsize inLen = env->GetArrayLength(in);  //这里主要就是数据类型的映射
    jbyte inBuf[inLen];
    env->GetByteArrayRegion(in, 0, inLen, inBuf);
 
    jsize outLen = env->GetArrayLength(out);
    short outBuf[outLen];
 
    Decoder_Interface_Decode(nativePointer, (const unsigned char*) inBuf, (short*) outBuf, bfi);
 
    // env->ReleaseByteArrayElements(in, inBuf, JNI_ABORT); // no need - GetByteArrayRegion handles this
    env->SetShortArrayRegion(out, 0, outLen, outBuf);     //释放
  }

#ifdef __cplusplus
}
#endif
#endif
