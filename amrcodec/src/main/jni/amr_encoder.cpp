/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
#include <interf_enc.h>
#include <string.h>
/* Header for class cn_wzh_amrcodec_encoder_AmrEncoder */

#ifndef _Included_cn_wzh_amrcodec_encoder_AmrEncoder
#define _Included_cn_wzh_amrcodec_encoder_AmrEncoder
struct encoder_state *state;
#ifdef __cplusplus
extern "C" {
#endif
/*
 * Class:     cn_wzh_amrcodec_encoder_AmrEncoder
 * Method:    initEncAmr
 * Signature: (I)I
 */
JNIEXPORT jlong JNICALL Java_cn_wzh_amrcodec_encoder_AmrEncoder_initEncAmr
  (JNIEnv *env, jclass aClazz, jint dxt){
	  state = (encoder_state *) Encoder_Interface_init(dxt);
	  return (jlong) state;
  }

/*
 * Class:     cn_wzh_amrcodec_encoder_AmrEncoder
 * Method:    exitEncAmr
 * Signature: (I)V
 */
JNIEXPORT void JNICALL Java_cn_wzh_amrcodec_encoder_AmrEncoder_exitEncAmr
  (JNIEnv *env, jclass aClazz, jint* nativePointer){
	  Encoder_Interface_exit(state);
  }

/*
 * Class:     cn_wzh_amrcodec_encoder_AmrEncoder
 * Method:    encodeAmr
 * Signature: (ILcn/wzh/amrcodec/encoder/AmrEncoder/Mode;[S[BI)I
 */
JNIEXPORT jint JNICALL Java_cn_wzh_amrcodec_encoder_AmrEncoder_encodeAmr
  (JNIEnv *env, jclass aClazz, jobject mode, jshortArray in, jbyteArray out) {

    jsize inLen = env->GetArrayLength(in);
    jshort inBuf[inLen];
    env->GetShortArrayRegion(in, 0, inLen, inBuf);

    jsize outLen = env->GetArrayLength(out);
    jbyte outBuf[outLen];
    int encodeLength;
	jclass jcz = env->GetObjectClass(mode);
    jmethodID getNameMethod = env->GetMethodID(jcz, "name",
            "()Ljava/lang/String;");
    jstring modevalue = (jstring) env->CallObjectMethod(mode, getNameMethod);
    const char * valueNative = env->GetStringUTFChars(modevalue, 0);
    /*为了使用C++中定义的模式，需要做以下的映射*/
    Mode cmode ;
    if(((strcmp(valueNative, "MR475") == 0))){
		cmode = MR475;
	}
    if(((strcmp(valueNative, "MR515") == 0))){
		cmode = MR515;
	}
    if(((strcmp(valueNative, "MR59") == 0))){
		cmode = MR59;
	}
    if(((strcmp(valueNative, "MR67") == 0))){
		cmode = MR67;
	}
    if(((strcmp(valueNative, "MR74") == 0))){
		cmode = MR74;
	}
    if(((strcmp(valueNative, "MR795") == 0))){
		cmode = MR795;
	}
    if(((strcmp(valueNative, "MR102") == 0))){
		cmode = MR102;
	}
    if(((strcmp(valueNative, "MR122") == 0))){
		cmode = MR122;
	}
    encodeLength = Encoder_Interface_Encode(state, cmode, (const short *) inBuf,
                                            (unsigned char *) outBuf);

    env->SetByteArrayRegion(out, 0, outLen, outBuf);
    return encodeLength;
}

#ifdef __cplusplus
}
#endif
#endif
